ctmc

//Ethereum pos 1 epochs=32 slots 
//slot= 12 sec
const int EpochSize = 32;
const double rMw=1/12.6; ///12.6; // delay blocchi
const epochs;
const double T=epochs*EpochSize*(12);
//const double T;
const int penality = 1;
const double rC = 1/32;
const double rIst = 1;
const double rAdd = 1;  //1/5
const double r = 1; //delay rem block 1/10
const double p =1/12;
const double np = 1-p;

global oldFinCount: int init 0;
global finCount : int init 0;

//const percentageStakeAttack;
//const stakeAttack;

const double delayTAtt = 0;	//1/30

const K=1; 

const int HasherRes = 0;

const Wait = -1;
const int Start = 0;
const int Height = 1;
const int Winner = 2;
const int Lost = 3;
const int Move = 4;
const int Add = 5;
const int Vote = 6;
const int Check = 7;
const int slotVote=8;
const int BlockVote=9;
const int CheckVotes=10;
const int Fin=11;


const int N = 10000;


const double epc = 1/384;
const double slot = 1/12;

module Validator0

	M0_STATE : [Start..Fin] init Start;
	b0 : block {m0,0;genesis,0};
	B0 : blockchain [{genesis,0;genesis,0}];
	c0 : [0..N] init 0;
	tmp0 : [0..3] init 0;
	votes0 : [0..1000] init 0;
	height0 : [0..N] init 0;
	lastFinalized0 : block {genesis,0;genesis,0};
	lastJustified0 : block {genesis,0;genesis,0};
  	lastCheck0 : block {genesis,0;genesis,0};
	heightCheckpoint0 : [0..N] init 0;
  	heightLast0 : [0..N] init 0;
	listCheckpoints0 : list [];
	lenListCheck0 : [0..N] init 0;
	numFinBlocks0 : [0..N] init 0;
	finalized0 : bool init false;
	created0 : bool init false;
	justified0 : bool init false;
	succAttack0 : bool init false;
    	maxHeight0 : [0..N] init 0;

  	[] (M0_STATE=Start)&(validatorID=0)  -> 1 : (b0'=createB(lastJustified0,B0,c0))&(c0'=c0+1)&(M0_STATE'=Winner)&(validatorID'=-1) & (created0'=true);
	[] (M0_STATE=Start)&(!isEmpty(listCheckpoints0)) -> rC :  (lastCheck0'=extractCheckpoint(listCheckpoints0,lastCheck0))&(heightLast0'=getHeight(extractCheckpoint(listCheckpoints0,lastCheck0)))&(votes0'=calcVotes(voti,extractCheckpoint(listCheckpoints0,lastCheck0)))&(M0_STATE'=Check);
  	[] (M0_STATE=Start) & ((voteID0=0) | (voteID1=0)) -> 1:(M0_STATE'=slotVote);
	

  	[] (M0_STATE=Start) & ((!(validatorID=0)) & (!(voteID0=0)) & (!(voteID1=0)))   -> 1 : (M0_STATE'=Start);
  	

  
	[] ((M0_STATE=slotVote) | (M0_STATE=Start))& (!isEmpty(set0)) -> 1 :  (b0'=extractBlock(set0))&(M0_STATE'=Move);
	[] (M0_STATE=slotVote)& ((isEmpty(set0)) & (isEmpty(listCheckpoints0))) -> 1 : (M0_STATE'=Start);
	
	

  	[addBlock0] (M0_STATE=Winner) -> rMw: (B0'=addBlock(B0,b0))&(M0_STATE'=Start)&(height0'=getHeight(b0))&(created0'=true);
	[] (created0=true) -> (created0'=false);


  	[] (M0_STATE=Lost)&(!isEmpty(set0)) -> 1 : (b0'=extractBlock(set0))&(M0_STATE'=Move);
  	[] (M0_STATE=Lost)&(isEmpty(set0)) -> 1 : (M0_STATE'=Start);

  	[extractBlock0] (M0_STATE=Move)&(canBeInserted(B0,b0))&(getHeight(b0)>maxHeight0)& ((voteID0=0) | (voteID1=0)) -> 1:(B0'=addBlock(B0,b0))&(M0_STATE'=((mod(getHeight(b0),EpochSize)=0))?Vote:BlockVote);
	[extractBlock0] (M0_STATE=Move)&(canBeInserted(B0,b0))&(getHeight(b0)>maxHeight0) & (!(voteID0=0)) & (!(voteID1=0)) & (mod(getHeight(b0),EpochSize)=0) -> 1:(B0'=addBlock(B0,b0))&(M0_STATE'=((mod(getHeight(b0),EpochSize)=0)&(getHeight(b0)>maxHeight0))?Vote:Start);
	[extractBlock0] (M0_STATE=Move)&(canBeInserted(B0,b0))&(getHeight(b0)>maxHeight0) & (!(voteID0=0)) & (!(voteID1=0)) & (!(mod(getHeight(b0),EpochSize)=0))-> 1:(B0'=addBlock(B0,b0))&(M0_STATE'=Start);

	
	[] (M0_STATE=Move)&(!canBeInserted(B0,b0)) -> rIst:(M0_STATE'=Start);


  	[voteBlock0] (M0_STATE=Vote)-> 1 :  (maxHeight0'=getHeight(b0))&(listCheckpoints0'=addBlockSet(listCheckpoints0,b0))&(M0_STATE'=Start);
	[voteBlock0] (M0_STATE=BlockVote) -> 1 : (M0_STATE'=slotVote);


  	[] (M0_STATE=Check)&(votes0>=2/3*tot_stake)&(heightLast0=heightCheckpoint0+EpochSize) -> rIst : (numFinBlocks0'=numFinBlocks0+1)&(lastFinalized0'=lastJustified0)&(lastJustified0'=lastCheck0)&(succAttack0'=((!lastCheck0)=true)?true:false)&(heightCheckpoint0'=heightLast0)&(listCheckpoints0'=removeBlock(listCheckpoints0,lastCheck0))&(B0'=updateHF(B0,lastJustified0))&(M0_STATE'=Fin)&(tmp0'=0)&(justified0'=true)&(finalized0'=true) & (finCount'= finCount +1);

  	[] (M0_STATE=Check)&(votes0>=2/3*tot_stake)&(heightLast0!=heightCheckpoint0+EpochSize)&(heightLast0>heightCheckpoint0) -> rIst : (lastJustified0'=lastCheck0)&(heightCheckpoint0'=heightLast0)&(succAttack0'=((!lastCheck0)=true)?true:false)&(listCheckpoints0'=removeBlock(listCheckpoints0,lastCheck0))&(M0_STATE'=Start)&(tmp0'=0)&(B0'=updateJust(B0,lastJustified0))&(justified0'=true);
	[] (M0_STATE=Check)&((votes0<=2/3*tot_stake)&(heightLast0<=heightCheckpoint0)|((votes0>=2/3*tot_stake)&(heightLast0<=heightCheckpoint0))) -> rIst: (listCheckpoints0'=removeBlock(listCheckpoints0,lastCheck0))&(M0_STATE'=Start)&(tmp0'=0);
	[] (M0_STATE=Check)&(votes0<=2/3*tot_stake)&(heightLast0>heightCheckpoint0) -> rIst: (M0_STATE'=Start)&(tmp0'=0);
	[finBlock0] (M0_STATE=Fin) -> 1:(finalized0'=false)&(justified0'=false)&(M0_STATE'=Start)&(created0'=false);

endmodule

module Validator1

	M1_STATE : [Start..Fin] init Start;
	b1 : block {m1,0;genesis,0};
	B1 : blockchain [{genesis,0;genesis,0}];
	c1 : [0..N] init 0;
	tmp1 : [0..3] init 0;
	votes1 : [0..1000] init 0;
	height1 : [0..N] init 0;
	lastFinalized1 : block {genesis,0;genesis,0};
	lastJustified1 : block {genesis,0;genesis,0};
  	lastCheck1 : block {genesis,0;genesis,0};
	heightCheckpoint1 : [0..N] init 0;
  	heightLast1 : [0..N] init 0;
	listCheckpoints1 : list [];
	lenListCheck1 : [0..N] init 0;
	numFinBlocks1 : [0..N] init 0;
	finalized1 : bool init false;
	justified1 : bool init false;
	created1 : bool init false;
	succAttack1 : bool init false;
    	maxHeight1 : [0..N] init 0;

  	[] (M1_STATE=Start)&(validatorID=1)  -> 1 : (b1'=createB(lastJustified1,B1,c1))&(c1'=c1+1)&(M1_STATE'=Winner)&(validatorID'=-1) & (created1'=true);
	[] (M1_STATE=Start)&(!isEmpty(listCheckpoints1)) -> rC :  (lastCheck1'=extractCheckpoint(listCheckpoints1,lastCheck1))&(heightLast1'=getHeight(extractCheckpoint(listCheckpoints1,lastCheck1)))&(votes1'=calcVotes(voti,extractCheckpoint(listCheckpoints1,lastCheck1)))&(M1_STATE'=Check);
  	[] (M1_STATE=Start) & ((voteID0=1) | (voteID1=1))-> 1:(M1_STATE'=slotVote);	
  


  	[] (M1_STATE=Start) & ((!(validatorID=1)) & (!(voteID0=1)) & (!(voteID1=1)))   -> 1 : (M1_STATE'=Start);
  	

   [] ((M1_STATE=slotVote) | (M1_STATE=Start))& (!isEmpty(set1)) -> 1 :  (b1'=extractBlock(set1))&(M1_STATE'=Move);
	[] (M1_STATE=slotVote) & ((isEmpty(set1)) & (isEmpty(listCheckpoints1))) -> 1 : (M1_STATE'=Start);


  	[addBlock1] (M1_STATE=Winner) -> rMw : (B1'=addBlock(B1,b1))&(M1_STATE'=Start)&(height1'=getHeight(b1))&(created1'=true);
	[] (created1=true) -> (created1'=false);


  	[] (M1_STATE=Lost)&(!isEmpty(set1)) -> 1 : (b1'=extractBlock(set1))&(M1_STATE'=Move);
  	[] (M1_STATE=Lost)&(isEmpty(set1)) -> 1 : (M1_STATE'=Start);


   [extractBlock1] (M1_STATE=Move)&(canBeInserted(B1,b1))&(getHeight(b1)>maxHeight1)& ((voteID0=1) | (voteID1=1)) -> 1:(B1'=addBlock(B1,b1))&(M1_STATE'=((mod(getHeight(b1),EpochSize)=0))?Vote:BlockVote);
	[extractBlock1] (M1_STATE=Move)&(canBeInserted(B1,b1))&(getHeight(b1)>maxHeight1)& (!(voteID0=1)) & (!(voteID1=1)) & (mod(getHeight(b1),EpochSize)=0) -> 1:(B1'=addBlock(B1,b1))&(M1_STATE'=((mod(getHeight(b1),EpochSize)=0)&(getHeight(b1)>maxHeight1))?Vote:Start);
	[extractBlock1] (M1_STATE=Move)&(canBeInserted(B1,b1))&(getHeight(b1)>maxHeight1) & (!(voteID0=1)) & (!(voteID1=1))  & (!(mod(getHeight(b1),EpochSize)=0)) -> 1:(B1'=addBlock(B1,b1))&(M1_STATE'=Start);

	
	[] (M1_STATE=Move)&(!canBeInserted(B1,b1)) -> rIst:(M1_STATE'=Start);


  	[voteBlock1] (M1_STATE=Vote)-> 1 :  (maxHeight1'=getHeight(b1))&(listCheckpoints1'=addBlockSet(listCheckpoints1,b1))&(M1_STATE'=Start);
	[voteBlock1] (M1_STATE=BlockVote) -> 1 : (M1_STATE'=slotVote);




  	[] (M1_STATE=Check)&(votes1>=2/3*tot_stake)&(heightLast1=heightCheckpoint1+EpochSize) -> rIst : (numFinBlocks1'=numFinBlocks1+1)&(lastFinalized1'=lastJustified1)&(lastJustified1'=lastCheck1)&(succAttack1'=((!lastCheck1)=true)?true:false)&(heightCheckpoint1'=heightLast1)&(listCheckpoints1'=removeBlock(listCheckpoints1,lastCheck1))&(B1'=updateHF(B1,lastJustified1))&(M1_STATE'=Fin)&(tmp1'=0)&(justified1'=true)&(finalized1'=true) & (finCount'= finCount +1);

  	[] (M1_STATE=Check)&(votes1>=2/3*tot_stake)&(heightLast1!=heightCheckpoint1+EpochSize)&(heightLast1>heightCheckpoint1) -> rIst : (lastJustified1'=lastCheck1)&(heightCheckpoint1'=heightLast1)&(succAttack1'=((!lastCheck1)=true)?true:false)&(listCheckpoints1'=removeBlock(listCheckpoints1,lastCheck1))&(M1_STATE'=Start)&(tmp1'=0)&(B1'=updateJust(B1,lastJustified1))&(justified1'=true);
	[] (M1_STATE=Check)&((votes1<=2/3*tot_stake)&(heightLast1<=heightCheckpoint1)|((votes1>=2/3*tot_stake)&(heightLast1<=heightCheckpoint1))) -> rIst: (listCheckpoints1'=removeBlock(listCheckpoints1,lastCheck1))&(M1_STATE'=Start)&(tmp1'=0);
	[] (M1_STATE=Check)&(votes1<=2/3*tot_stake)&(heightLast1>heightCheckpoint1) -> rIst: (M1_STATE'=Start)&(tmp1'=0);
	[finBlock1] (M1_STATE=Fin) -> 1:(finalized1'=false)&(justified1'=false)&(M1_STATE'=Start)&(created1'=false);

endmodule

module Validator2

	M2_STATE : [Start..Fin] init Start;
	b2 : block {m2,0;genesis,0};
	B2 : blockchain [{genesis,0;genesis,0}];
	c2 : [0..N] init 0;
	tmp2 : [0..3] init 0;
	votes2 : [0..1000] init 0;
	height2 : [0..N] init 0;
	lastFinalized2 : block {genesis,0;genesis,0};
	lastJustified2 : block {genesis,0;genesis,0};
  	lastCheck2 : block {genesis,0;genesis,0};
	heightCheckpoint2 : [0..N] init 0;
  	heightLast2 : [0..N] init 0;
	listCheckpoints2 : list [];
	lenListCheck2 : [0..N] init 0;
	numFinBlocks2 : [0..N] init 0;
	finalized2 : bool init false;
	created2 : bool init false;
	justified2 : bool init false;
	succAttack2 : bool init false;
    	maxHeight2 : [0..N] init 0;

  	[] (M2_STATE=Start)&(validatorID=2)  -> 1: (b2'=createB(lastJustified2,B2,c2))&(c2'=c2+1)&(M2_STATE'=Winner)&(validatorID'=-1)& (created2'=true);
  	[] (M2_STATE=Start)&(!isEmpty(listCheckpoints2)) -> rC :  (lastCheck2'=extractCheckpoint(listCheckpoints2,lastCheck2))&(heightLast2'=getHeight(extractCheckpoint(listCheckpoints2,lastCheck2)))&(votes2'=calcVotes(voti,extractCheckpoint(listCheckpoints2,lastCheck2)))&(M2_STATE'=Check);
  	[] (M2_STATE=Start) & ((voteID0=2) | (voteID1=2))-> 1:(M2_STATE'=slotVote);	
  


  	[] (M2_STATE=Start) & ((!(validatorID=2)) & (!(voteID0=2)) & (!(voteID1=2)))   -> 1 : (M2_STATE'=Start);
  	

   [] ((M2_STATE=slotVote) | (M2_STATE=Start))& (!isEmpty(set2)) -> 1 :  (b2'=extractBlock(set2))&(M2_STATE'=Move);
	[] (M2_STATE=slotVote) & ((isEmpty(set2)) & (isEmpty(listCheckpoints2))) -> 1 : (M2_STATE'=Start);


  	[addBlock2] (M2_STATE=Winner) -> rMw : (B2'=addBlock(B2,b2))&(M2_STATE'=Start)&(height2'=getHeight(b2))&(created2'=true);
	[] (created2=true) -> (created2'=false);


  	[] (M2_STATE=Lost)&(!isEmpty(set2)) -> 1 : (b2'=extractBlock(set2))&(M2_STATE'=Move);
  	[] (M2_STATE=Lost)&(isEmpty(set2)) -> 1 : (M2_STATE'=Start);


   [extractBlock2] (M2_STATE=Move)&(canBeInserted(B2,b2))&(getHeight(b2)>maxHeight2)& ((voteID0=2) | (voteID1=2)) -> 1:(B2'=addBlock(B2,b2))&(M2_STATE'=((mod(getHeight(b2),EpochSize)=0))?Vote:BlockVote);
	[extractBlock2] (M2_STATE=Move)&(canBeInserted(B2,b2))&(getHeight(b2)>maxHeight2)& (!(voteID0=2)) & (!(voteID1=2)) & (mod(getHeight(b2),EpochSize)=0) -> 1:(B2'=addBlock(B2,b2))&(M2_STATE'=((mod(getHeight(b2),EpochSize)=0)&(getHeight(b2)>maxHeight2))?Vote:Start);
	[extractBlock2] (M2_STATE=Move)&(canBeInserted(B2,b2))&(getHeight(b2)>maxHeight2) & (!(voteID0=2)) & (!(voteID1=2))  & (!(mod(getHeight(b2),EpochSize)=0)) -> 1:(B2'=addBlock(B2,b2))&(M2_STATE'=Start);

	
	[] (M2_STATE=Move)&(!canBeInserted(B2,b2)) -> rIst:(M2_STATE'=Start);


  	[voteBlock2] (M2_STATE=Vote)-> 1 :  (maxHeight2'=getHeight(b2))&(listCheckpoints2'=addBlockSet(listCheckpoints2,b2))&(M2_STATE'=Start);
	[voteBlock2] (M2_STATE=BlockVote) -> 1 : (M2_STATE'=slotVote);




  	[] (M2_STATE=Check)&(votes2>=2/3*tot_stake)&(heightLast2=heightCheckpoint2+EpochSize) -> rIst : (numFinBlocks2'=numFinBlocks2+1)&(lastFinalized2'=lastJustified2)&(lastJustified2'=lastCheck2)&(succAttack2'=((!lastCheck2)=true)?true:false)&(heightCheckpoint2'=heightLast2)&(listCheckpoints2'=removeBlock(listCheckpoints2,lastCheck2))&(B2'=updateHF(B2,lastJustified2))&(M2_STATE'=Fin)&(tmp2'=0)&(justified2'=true)&(finalized2'=true) & (finCount'= finCount +1);

	[] (M2_STATE=Check)&(votes2>=2/3*tot_stake)&(heightLast2!=heightCheckpoint2+EpochSize)&(heightLast2>heightCheckpoint2) -> rIst : (lastJustified2'=lastCheck2)&(heightCheckpoint2'=heightLast2)&(succAttack2'=((!lastCheck2)=true)?true:false)&(listCheckpoints2'=removeBlock(listCheckpoints2,lastCheck2))&(M2_STATE'=Start)&(tmp2'=0)&(B2'=updateJust(B2,lastJustified2))&(justified2'=true);
	[] (M2_STATE=Check)&((votes2<=2/3*tot_stake)&(heightLast2<=heightCheckpoint2)|((votes2>=2/3*tot_stake)&(heightLast2<=heightCheckpoint2))) -> rIst: (listCheckpoints2'=removeBlock(listCheckpoints2,lastCheck2))&(M2_STATE'=Start)&(tmp2'=0);
	[] (M2_STATE=Check)&(votes2<=2/3*tot_stake)&(heightLast2>heightCheckpoint2) -> rIst: (M2_STATE'=Start)&(tmp2'=0);
	[finBlock2] (M2_STATE=Fin) -> 1:(finalized2'=false)&(justified2'=false)&(M2_STATE'=Start)&(created2'=false);

endmodule

module Validator3

	M3_STATE : [Start..Fin] init Start;
	b3 : block {m3,0;genesis,0};
	B3 : blockchain [{genesis,0;genesis,0}];
	c3 : [0..N] init 0;
	tmp3 : [0..3] init 0;
	votes3 : [0..1000] init 0;
	height3 : [0..N] init 0;
	lastFinalized3 : block {genesis,0;genesis,0};
	lastJustified3 : block {genesis,0;genesis,0};
  	lastCheck3 : block {genesis,0;genesis,0};
	heightCheckpoint3 : [0..N] init 0;
  	heightLast3 : [0..N] init 0;
	listCheckpoints3 : list [];
	lenListCheck3 : [0..N] init 0;
	numFinBlocks3 : [0..N] init 0;
	finalized3 : bool init false;
	created3 : bool init false;
	justified3 : bool init false;
	succAttack3 : bool init false;
    	maxHeight3 : [0..N] init 0;

  	[] (M3_STATE=Start)&(validatorID=3) -> 1 : (b3'=createB(lastJustified3,B3,c3))&(c3'=c3+1)&(M3_STATE'=Winner)&(validatorID'=-1)& (created3'=true);
  	[] (M3_STATE=Start)&(!isEmpty(listCheckpoints3)) -> rC :  (lastCheck3'=extractCheckpoint(listCheckpoints3,lastCheck3))&(heightLast3'=getHeight(extractCheckpoint(listCheckpoints3,lastCheck3)))&(votes3'=calcVotes(voti,extractCheckpoint(listCheckpoints3,lastCheck3)))&(M3_STATE'=Check);
  	[] (M3_STATE=Start) & ((voteID0=3) | (voteID1=3))-> 1:(M3_STATE'=slotVote);	
  


  	[] (M3_STATE=Start) & ((!(validatorID=3)) & (!(voteID0=3)) & (!(voteID1=3)))   -> 1 : (M3_STATE'=Start);
  	

   [] ((M3_STATE=slotVote) | (M3_STATE=Start))& (!isEmpty(set3)) -> 1 :  (b3'=extractBlock(set3))&(M3_STATE'=Move);
	[] (M3_STATE=slotVote) & ((isEmpty(set3)) & (isEmpty(listCheckpoints3))) -> 1 : (M3_STATE'=Start);


  	[addBlock3] (M3_STATE=Winner) -> rMw : (B3'=addBlock(B3,b3))&(M3_STATE'=Start)&(height3'=getHeight(b3))&(created3'=true);
	[] (created3=true) -> (created3'=false);


  	[] (M3_STATE=Lost)&(!isEmpty(set3)) -> 1 : (b3'=extractBlock(set3))&(M3_STATE'=Move);
  	[] (M3_STATE=Lost)&(isEmpty(set3)) -> 1 : (M3_STATE'=Start);


   [extractBlock3] (M3_STATE=Move)&(canBeInserted(B3,b3))&(getHeight(b3)>maxHeight3)& ((voteID0=3) | (voteID1=3)) -> 1:(B3'=addBlock(B3,b3))&(M3_STATE'=((mod(getHeight(b3),EpochSize)=0))?Vote:BlockVote);
	[extractBlock3] (M3_STATE=Move)&(canBeInserted(B3,b3))&(getHeight(b3)>maxHeight3)& (!(voteID0=3)) & (!(voteID1=3)) & (mod(getHeight(b3),EpochSize)=0) -> 1:(B3'=addBlock(B3,b3))&(M3_STATE'=((mod(getHeight(b3),EpochSize)=0)&(getHeight(b3)>maxHeight3))?Vote:Start);
	[extractBlock3] (M3_STATE=Move)&(canBeInserted(B3,b3))&(getHeight(b3)>maxHeight3) & (!(voteID0=3)) & (!(voteID1=3))  & (!(mod(getHeight(b3),EpochSize)=0)) -> 1:(B3'=addBlock(B3,b3))&(M3_STATE'=Start);

	
	[] (M3_STATE=Move)&(!canBeInserted(B3,b3)) -> rIst:(M3_STATE'=Start);


  	[voteBlock3] (M3_STATE=Vote)-> 1 :  (maxHeight3'=getHeight(b3))&(listCheckpoints3'=addBlockSet(listCheckpoints3,b3))&(M3_STATE'=Start);
	[voteBlock3] (M3_STATE=BlockVote) -> 1 : (M3_STATE'=slotVote);

  	
  	[] (M3_STATE=Check)&(votes3>=2/3*tot_stake)&(heightLast3=heightCheckpoint3+EpochSize) -> rIst : (numFinBlocks3'=numFinBlocks3+1)&(lastFinalized3'=lastJustified3)&(lastJustified3'=lastCheck3)&(succAttack3'=((!lastCheck3)=true)?true:false)&(heightCheckpoint3'=heightLast3)&(listCheckpoints3'=removeBlock(listCheckpoints3,lastCheck3))&(B3'=updateHF(B3,lastJustified3))&(M3_STATE'=Fin)&(tmp3'=0)&(justified3'=true)&(finalized3'=true) & (finCount'= finCount +1);

	[] (M3_STATE=Check)&(votes3>=2/3*tot_stake)&(heightLast3!=heightCheckpoint3+EpochSize)&(heightLast3>heightCheckpoint3) -> rIst : (lastJustified3'=lastCheck3)&(heightCheckpoint3'=heightLast3)&(succAttack3'=((!lastCheck3)=true)?true:false)&(listCheckpoints3'=removeBlock(listCheckpoints3,lastCheck3))&(M3_STATE'=Start)&(tmp3'=0)&(B3'=updateJust(B3,lastJustified3))&(justified3'=true);
	[] (M3_STATE=Check)&((votes3<=2/3*tot_stake)&(heightLast3<=heightCheckpoint3)|((votes3>=2/3*tot_stake)&(heightLast3<=heightCheckpoint3))) -> rIst: (listCheckpoints3'=removeBlock(listCheckpoints3,lastCheck3))&(M3_STATE'=Start)&(tmp3'=0);
	[] (M3_STATE=Check)&(votes3<=2/3*tot_stake)&(heightLast3>heightCheckpoint3) -> rIst: (M3_STATE'=Start)&(tmp3'=0);
	[finBlock3] (M3_STATE=Fin) -> 1:(finalized3'=false)&(justified3'=false)&(M3_STATE'=Start)&(created3'=false);

endmodule

module Validator4

	M4_STATE : [Start..Fin] init Start;
	b4 : block {m4,0;genesis,0};
	B4 : blockchain [{genesis,0;genesis,0}];
	c4 : [0..N] init 0;
	tmp4 : [0..3] init 0;
	votes4 : [0..1000] init 0;
	height4 : [0..N] init 0;
	lastFinalized4 : block {genesis,0;genesis,0};
	lastJustified4 : block {genesis,0;genesis,0};
  	lastCheck4 : block {genesis,0;genesis,0};
	heightCheckpoint4 : [0..N] init 0;
  	heightLast4 : [0..N] init 0;
	listCheckpoints4 : list [];
	lenListCheck4 : [0..N] init 0;
	numFinBlocks4 : [0..N] init 0;
	finalized4 : bool init false;
	created4 : bool init false;
	justified4 : bool init false;
	succAttack4 : bool init false;
    	maxHeight4 : [0..N] init 0;


  	[] (M4_STATE=Start)&(validatorID=4)  -> 1 : (b4'=createB(lastJustified4,B4,c4))&(c4'=c4+1)&(M4_STATE'=Winner)&(validatorID'=-1)& (created4'=true);
	[] (M4_STATE=Start)&(!isEmpty(listCheckpoints4)) -> rC :  (lastCheck4'=extractCheckpoint(listCheckpoints4,lastCheck4))&(heightLast4'=getHeight(extractCheckpoint(listCheckpoints4,lastCheck4)))&(votes4'=calcVotes(voti,extractCheckpoint(listCheckpoints4,lastCheck4)))&(M4_STATE'=Check);
  	[] (M4_STATE=Start) & ((voteID0=4) | (voteID1=4))-> 1:(M4_STATE'=slotVote);	
  


  	[] (M4_STATE=Start) & ((!(validatorID=4)) & (!(voteID0=4)) & (!(voteID1=4)))   -> 1 : (M4_STATE'=Start);
  	

   [] ((M4_STATE=slotVote) | (M4_STATE=Start))& (!isEmpty(set4)) -> 1 :  (b4'=extractBlock(set4))&(M4_STATE'=Move);
	[] (M4_STATE=slotVote) & ((isEmpty(set4)) & (isEmpty(listCheckpoints4))) -> 1 : (M4_STATE'=Start);


  	[addBlock4] (M4_STATE=Winner) -> rMw : (B4'=addBlock(B4,b4))&(M4_STATE'=Start)&(height4'=getHeight(b4))&(created4'=true);
	[] (created4=true) -> (created4'=false);


  	[] (M4_STATE=Lost)&(!isEmpty(set4)) -> 1 : (b4'=extractBlock(set4))&(M4_STATE'=Move);
  	[] (M4_STATE=Lost)&(isEmpty(set4)) -> 1 : (M4_STATE'=Start);


   [extractBlock4] (M4_STATE=Move)&(canBeInserted(B4,b4))&(getHeight(b4)>maxHeight4)& ((voteID0=4) | (voteID1=4)) -> 1:(B4'=addBlock(B4,b4))&(M4_STATE'=((mod(getHeight(b4),EpochSize)=0))?Vote:BlockVote);
	[extractBlock4] (M4_STATE=Move)&(canBeInserted(B4,b4))&(getHeight(b4)>maxHeight4)& (!(voteID0=4)) & (!(voteID1=4)) & (mod(getHeight(b4),EpochSize)=0) -> 1:(B4'=addBlock(B4,b4))&(M4_STATE'=((mod(getHeight(b4),EpochSize)=0)&(getHeight(b4)>maxHeight4))?Vote:Start);
	[extractBlock4] (M4_STATE=Move)&(canBeInserted(B4,b4))&(getHeight(b4)>maxHeight4) & (!(voteID0=4)) & (!(voteID1=4))  & (!(mod(getHeight(b4),EpochSize)=0)) -> 1:(B4'=addBlock(B4,b4))&(M4_STATE'=Start);

	
	[] (M4_STATE=Move)&(!canBeInserted(B4,b4)) -> rIst:(M4_STATE'=Start);


  	[voteBlock4] (M4_STATE=Vote)-> 1 :  (maxHeight4'=getHeight(b4))&(listCheckpoints4'=addBlockSet(listCheckpoints4,b4))&(M4_STATE'=Start);
	[voteBlock4] (M4_STATE=BlockVote) -> 1 : (M4_STATE'=slotVote);


  	[] (M4_STATE=Check)&(votes4>=2/3*tot_stake)&(heightLast4=heightCheckpoint4+EpochSize) -> rIst : (numFinBlocks4'=numFinBlocks4+1)&(lastFinalized4'=lastJustified4)&(lastJustified4'=lastCheck4)&(succAttack4'=((!lastCheck4)=true)?true:false)&(heightCheckpoint4'=heightLast4)&(listCheckpoints4'=removeBlock(listCheckpoints4,lastCheck4))&(B4'=updateHF(B4,lastJustified4))&(M4_STATE'=Fin)&(tmp4'=0)&(justified4'=true)&(finalized4'=true) & (finCount'= finCount +1);
	[] (M4_STATE=Check)&(votes4>=2/3*tot_stake)&(heightLast4!=heightCheckpoint4+EpochSize)&(heightLast4>heightCheckpoint4) -> rIst : (lastJustified4'=lastCheck4)&(heightCheckpoint4'=heightLast4)&(succAttack4'=((!lastCheck4)=true)?true:false)&(listCheckpoints4'=removeBlock(listCheckpoints4,lastCheck4))&(M4_STATE'=Start)&(tmp4'=0)&(B4'=updateJust(B4,lastJustified4))&(justified4'=true);
	[] (M4_STATE=Check)&((votes4<=2/3*tot_stake)&(heightLast4<=heightCheckpoint4)|((votes4>=2/3*tot_stake)&(heightLast4<=heightCheckpoint4))) -> rIst: (listCheckpoints4'=removeBlock(listCheckpoints4,lastCheck4))&(M4_STATE'=Start)&(tmp4'=0);
	[] (M4_STATE=Check)&(votes4<=2/3*tot_stake)&(heightLast4>heightCheckpoint4) -> rIst: (M4_STATE'=Start)&(tmp4'=0);
	[finBlock4] (M4_STATE=Fin) -> 1:(finalized4'=false)&(justified4'=false)&(M4_STATE'=Start)&(created4'=false);

endmodule

module Validator5

	M5_STATE : [Start..Fin] init Start;
	b5 : block {m5,0;genesis,0};
	B5 : blockchain [{genesis,0;genesis,0}];
	c5 : [0..N] init 0;
	tmp5 : [0..3] init 0;
	votes5 : [0..1000] init 0;
	height5 : [0..N] init 0;
	lastFinalized5 : block {genesis,0;genesis,0};
	lastJustified5 : block {genesis,0;genesis,0};
  	lastCheck5 : block {genesis,0;genesis,0};
	heightCheckpoint5 : [0..N] init 0;
  	heightLast5 : [0..N] init 0;
	listCheckpoints5 : list [];
	lenListCheck5 : [0..N] init 0;
	numFinBlocks5 : [0..N] init 0;
	finalized5 : bool init false;
	created5 : bool init false;
	justified5 : bool init false;
	succAttack5 : bool init false;
    	maxHeight5 : [0..N] init 0;

  	[] (M5_STATE=Start) & (validatorID=5) -> 1: (b5'=createB(lastJustified5,B5,c5))&(c5'=c5+1)&(M5_STATE'=Winner)&(validatorID'=-1)& (created5'=true);
	[] (M5_STATE=Start)&(!isEmpty(listCheckpoints5)) -> rC :  (lastCheck5'=extractCheckpoint(listCheckpoints5,lastCheck5))&(heightLast5'=getHeight(extractCheckpoint(listCheckpoints5,lastCheck5)))&(votes5'=calcVotes(voti,extractCheckpoint(listCheckpoints5,lastCheck5)))&(M5_STATE'=Check);
  	[] (M5_STATE=Start) & ((voteID0=5) | (voteID1=5))-> 1:(M5_STATE'=slotVote);	
  


  	[] (M5_STATE=Start) & ((!(validatorID=5)) & (!(voteID0=5)) & (!(voteID1=5)))   -> 1 : (M5_STATE'=Start);
  	

   [] ((M5_STATE=slotVote) | (M5_STATE=Start))& (!isEmpty(set5)) -> 1 :  (b5'=extractBlock(set5))&(M5_STATE'=Move);
	[] (M5_STATE=slotVote) & ((isEmpty(set5)) & (isEmpty(listCheckpoints5))) -> 1 : (M5_STATE'=Start);


  	[addBlock5] (M5_STATE=Winner) -> rMw : (B5'=addBlock(B5,b5))&(M5_STATE'=Start)&(height5'=getHeight(b5))&(created5'=true);
	[] (created5=true) -> (created5'=false);


  	[] (M5_STATE=Lost)&(!isEmpty(set5)) -> 1 : (b5'=extractBlock(set5))&(M5_STATE'=Move);
  	[] (M5_STATE=Lost)&(isEmpty(set5)) -> 1 : (M5_STATE'=Start);


   [extractBlock5] (M5_STATE=Move)&(canBeInserted(B5,b5))&(getHeight(b5)>maxHeight5)& ((voteID0=5) | (voteID1=5)) -> 1:(B5'=addBlock(B5,b5))&(M5_STATE'=((mod(getHeight(b5),EpochSize)=0))?Vote:BlockVote);
	[extractBlock5] (M5_STATE=Move)&(canBeInserted(B5,b5))&(getHeight(b5)>maxHeight5)& (!(voteID0=5)) & (!(voteID1=5)) & (mod(getHeight(b5),EpochSize)=0) -> 1:(B5'=addBlock(B5,b5))&(M5_STATE'=((mod(getHeight(b5),EpochSize)=0)&(getHeight(b5)>maxHeight5))?Vote:Start);
	[extractBlock5] (M5_STATE=Move)&(canBeInserted(B5,b5))&(getHeight(b5)>maxHeight5) & (!(voteID0=5)) & (!(voteID1=5))  & (!(mod(getHeight(b5),EpochSize)=0)) -> 1:(B5'=addBlock(B5,b5))&(M5_STATE'=Start);

	
	[] (M5_STATE=Move)&(!canBeInserted(B5,b5)) -> rIst:(M5_STATE'=Start);


  	[voteBlock5] (M5_STATE=Vote)-> 1 :  (maxHeight5'=getHeight(b5))&(listCheckpoints5'=addBlockSet(listCheckpoints5,b5))&(M5_STATE'=Start);
	[voteBlock5] (M5_STATE=BlockVote) -> 1 : (M5_STATE'=slotVote);

  	[] (M5_STATE=Check)&(votes5>=2/3*tot_stake)&(heightLast5=heightCheckpoint5+EpochSize) -> rIst : (numFinBlocks5'=numFinBlocks5+1)&(lastFinalized5'=lastJustified5)&(lastJustified5'=lastCheck5)&(succAttack5'=((!lastCheck5)=true)?true:false)&(heightCheckpoint5'=heightLast5)&(listCheckpoints5'=removeBlock(listCheckpoints5,lastCheck5))&(B5'=updateHF(B5,lastJustified5))&(M5_STATE'=Fin)&(tmp5'=0)&(justified5'=true)&(finalized5'=true) & (finCount'= finCount +1);

	[] (M5_STATE=Check)&(votes5>=2/3*tot_stake)&(heightLast5!=heightCheckpoint5+EpochSize)&(heightLast5>heightCheckpoint5) -> rIst : (lastJustified5'=lastCheck5)&(heightCheckpoint5'=heightLast5)&(succAttack5'=((!lastCheck5)=true)?true:false)&(listCheckpoints5'=removeBlock(listCheckpoints5,lastCheck5))&(M5_STATE'=Start)&(tmp5'=0)&(B5'=updateJust(B5,lastJustified5))&(justified5'=true);
	[] (M5_STATE=Check)&((votes5<=2/3*tot_stake)&(heightLast5<=heightCheckpoint5)|((votes5>=2/3*tot_stake)&(heightLast5<=heightCheckpoint5))) -> rIst: (listCheckpoints5'=removeBlock(listCheckpoints5,lastCheck5))&(M5_STATE'=Start)&(tmp5'=0);
	[] (M5_STATE=Check)&(votes5<=2/3*tot_stake)&(heightLast5>heightCheckpoint5) -> rIst: (M5_STATE'=Start)&(tmp5'=0);
	[finBlock5] (M5_STATE=Fin) -> 1:(finalized5'=false)&(justified5'=false)&(M5_STATE'=Start)&(created5'=false);

endmodule



module Updater

    Updater_STATE : [0..1] init 0;
    n_epochs : [2..N] init 2;
    tot_stake : [0..50000] init 192;
    voti : hash [];
    maxHeight : [0..5000] init 0;

    tmpUp0 : [0..1] init 0;
    reward0 : [0..N] init 0;
    stake0 : [0..N] init 32;

    tmpUp1 : [0..1] init 0;
    reward1 : [0..N] init 0;
    stake1 : [0..N] init 32;

    tmpUp2 : [0..1] init 0;
    reward2 : [0..N] init 0;
    stake2 : [0..N] init 32;
    
    tmpUp3 : [0..1] init 0;
    reward3 : [0..N] init 0;
    stake3 : [0..N] init 32;

    tmpUp4 : [0..1] init 0;
    reward4 : [0..N] init 0;
    stake4 : [0..N] init 32;

    tmpUp5 : [0..1] init 0;
    reward5 : [0..N] init 0;
    stake5 : [0..N] init 32;
	
		
     
	

    [voteBlock0] (Updater_STATE=0)  -> 1 : (voti'=addVote(voti,b0,stake0));

    [finBlock0] (Updater_STATE=0)&(getHeight(lastFinalized0)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized0,(getHeight(lastFinalized0)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake));
    [finBlock0] (Updater_STATE=0)&(getHeight(lastFinalized0)<=maxHeight) -> 1 : (Updater_STATE'=0);
	
    [voteBlock1] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b1,stake1));

    [finBlock1] (Updater_STATE=0)&(getHeight(lastFinalized1)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized1,(getHeight(lastFinalized1)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake));
    [finBlock1] (Updater_STATE=0)&(getHeight(lastFinalized1)<=maxHeight) -> 1 : (Updater_STATE'=0);

    [voteBlock2] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b2,stake2));

    [finBlock2] (Updater_STATE=0)&(getHeight(lastFinalized2)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized2,(getHeight(lastFinalized2)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake));
    [finBlock2] (Updater_STATE=0)&(getHeight(lastFinalized2)<=maxHeight) -> 1 : (Updater_STATE'=0);

    [voteBlock3] (Updater_STATE=0)-> 1 : (voti'=addVote(voti,b3,stake3));

    [finBlock3] (Updater_STATE=0)&(getHeight(lastFinalized3)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized3,(getHeight(lastFinalized3)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake));
    [finBlock3] (Updater_STATE=0)&(getHeight(lastFinalized3)<=maxHeight) -> 1 : (Updater_STATE'=0);

    [voteBlock4] (Updater_STATE=0)-> 1 : (voti'=addVote(voti,b4,stake4));

    [finBlock4] (Updater_STATE=0)&(getHeight(lastFinalized4)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized4,(getHeight(lastFinalized4)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake));
    [finBlock4] (Updater_STATE=0)&(getHeight(lastFinalized4)<=maxHeight) -> 1 : (Updater_STATE'=0);

    [voteBlock5] (Updater_STATE=0) -> 1 : (voti'=addVote(voti,b5,stake5));

    [finBlock5] (Updater_STATE=0)&(getHeight(lastFinalized5)>maxHeight) -> 1 :(stake0'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake0,tot_stake))&(stake1'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake1,tot_stake))&(stake2'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake2,tot_stake))&(stake3'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake3,tot_stake))&(stake4'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake4,tot_stake))&(stake5'=updateStake(voti,lastFinalized5,(getHeight(lastFinalized5)+EpochSize)/EpochSize-maxHeight/EpochSize,stake5,tot_stake));
    [finBlock5] (Updater_STATE=0)&(getHeight(lastFinalized5)<=maxHeight) -> 1 : (Updater_STATE'=0);

    

endmodule


module Network

    Network_STATE : [0..2] init 0;

    set0 : list [];
    lenGlobal0 : [0..N] init 0;

    set1 : list [];
    lenGlobal1 : [0..N] init 0;

    set2 : list [];
    lenGlobal2 : [0..N] init 0;

    set3 : list [];
    lenGlobal3 : [0..N] init 0;

    set4 : list [];
    lenGlobal4 : [0..N] init 0;

    set5 : list [];
    lenGlobal5 : [0..N] init 0;

   

    [addBlock0] (M0_STATE=Winner)  -> rAdd : (set1'=addBlockSet(set1,b0))&(set2'=addBlockSet(set2,b0))&(set3'=addBlockSet(set3,b0))&(set4'=addBlockSet(set4,b0))&(set5'=addBlockSet(set5,b0));
    [extractBlock0] (M0_STATE=Move) -> r : (set0'=removeBlock(set0,b0));

    [addBlock1] (M1_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b1))&(set2'=addBlockSet(set2,b1))&(set3'=addBlockSet(set3,b1))&(set4'=addBlockSet(set4,b1))&(set5'=addBlockSet(set5,b1));
    [extractBlock1] (M1_STATE=Move) -> r : (set1'=removeBlock(set1,b1));

    [addBlock2] (M2_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b2))&(set1'=addBlockSet(set1,b2))&(set3'=addBlockSet(set3,b2))&(set4'=addBlockSet(set4,b2))&(set5'=addBlockSet(set5,b2));
    [extractBlock2] (M2_STATE=Move) -> r : (set2'=removeBlock(set2,b2));

    [addBlock3] (M3_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b3))&(set1'=addBlockSet(set1,b3))&(set2'=addBlockSet(set2,b3))&(set4'=addBlockSet(set4,b3))&(set5'=addBlockSet(set5,b3));
    [extractBlock3] (M3_STATE=Move) -> r : (set3'=removeBlock(set3,b3));

    [addBlock4] (M4_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b4))&(set1'=addBlockSet(set1,b4))&(set2'=addBlockSet(set2,b4))&(set3'=addBlockSet(set3,b4))&(set5'=addBlockSet(set5,b4));
    [extractBlock4] (M4_STATE=Move) -> r : (set4'=removeBlock(set4,b4));

    [addBlock5] (M5_STATE=Winner)  -> rAdd : (set0'=addBlockSet(set0,b5))&(set1'=addBlockSet(set1,b5))&(set2'=addBlockSet(set2,b5))&(set3'=addBlockSet(set3,b5))&(set4'=addBlockSet(set4,b5));
    [extractBlock5] (M5_STATE=Move) -> r : (set5'=removeBlock(set5,b5));

endmodule

module Global

	diff : [0..N] init 0;
	kLength : bool init false;
	
	finalizationIncrease : bool init false;

	[] (M0_STATE = Move) | (M1_STATE = Move) | (M2_STATE = Move) | (M3_STATE = Move) | (M4_STATE = Move) | (M5_STATE = Move) -> 1 : (diff'=calculateFork(B0,B1,B2,B3,B4,B5));
	//[] (M0_STATE = Start) | (M1_STATE = Start) | (M2_STATE = Start) | (M3_STATE = Start) | (M4_STATE = Start) | (M5_STATE = Start) -> 1 : (diff'=calculateFork(B0,B1,B2,B3,B4,B5));
	[] (diff>0) & (diff=K) -> 1 :(kLength' = true);
	[] (diff>0) & (kLength = true) -> 1 : (kLength' = false);
	[] (finalized0 = true | finalized1 = true | finalized2 = true | finalized3 = true | finalized4 = true | finalized5 = true) & (finCount = oldFinCount) -> 1 : (finCount'=finCount+1);
	[] (finCount > oldFinCount) -> 1 : (finalizationIncrease' = true) & (oldFinCount' = finCount);

	

endmodule
	
	

const int validator_count = 6;
global validatorID : int init -1;
global voteID0 : int init -1;
global voteID1 : int init -1;
global newRandao: bool init true;

module Randao
	
	ValidatorB0: int init -1;
	ValidatorB1: int init -1;
	ValidatorB2: int init -1;
	ValidatorB3: int init -1;
	ValidatorB4: int init -1;
	ValidatorB5: int init -1;
	ValidatorB6: int init -1;
	ValidatorB7: int init -1;
	ValidatorB8: int init -1;
	ValidatorB9: int init -1;
	ValidatorB10: int init -1;
	ValidatorB11: int init -1;
	ValidatorB12: int init -1;
	ValidatorB13: int init -1;
	ValidatorB14: int init -1;
	ValidatorB15: int init -1;
	ValidatorB16: int init -1;
	ValidatorB17: int init -1;
	ValidatorB18: int init -1;
	ValidatorB19: int init -1;
	ValidatorB20: int init -1;
	ValidatorB21: int init -1;
	ValidatorB22: int init -1;
	ValidatorB23: int init -1;
	ValidatorB24: int init -1;
	ValidatorB25: int init -1;
	ValidatorB26: int init -1;
	ValidatorB27: int init -1;
	ValidatorB28: int init -1;
	ValidatorB29: int init -1;
	ValidatorB30: int init -1;
	ValidatorB31: int init -1;
	

	AttS00: int init -1;
	AttS10: int init -1;
	AttS20: int init -1;
	AttS30: int init -1;
	AttS40: int init -1;
	AttS50: int init -1;
	AttS60: int init -1;
	AttS70: int init -1;
	AttS80: int init -1;
	AttS90: int init -1;
	AttS100: int init -1;
	AttS110: int init -1;
	AttS120: int init -1;
	AttS130: int init -1;
	AttS140: int init -1;
	AttS150: int init -1;
	AttS160: int init -1;
	AttS170: int init -1;
	AttS180: int init -1;
	AttS190: int init -1;
	AttS200: int init -1;
	AttS210: int init -1;
	AttS220: int init -1;
	AttS230: int init -1;
	AttS240: int init -1;
	AttS250: int init -1;
	AttS260: int init -1;
	AttS270: int init -1;
	AttS280: int init -1;
	AttS290: int init -1;
	AttS300: int init -1;
	AttS310: int init -1;
	AttS01: int init -1;
	AttS11: int init -1;
	AttS21: int init -1;
	AttS31: int init -1;
	AttS41: int init -1;
	AttS51: int init -1;
	AttS61: int init -1;
	AttS71: int init -1;
	AttS81: int init -1;
	AttS91: int init -1;
	AttS101: int init -1;
	AttS111: int init -1;
	AttS121: int init -1;
	AttS131: int init -1;
	AttS141: int init -1;
	AttS151: int init -1;
	AttS161: int init -1;
	AttS171: int init -1;
	AttS181: int init -1;
	AttS191: int init -1;
	AttS201: int init -1;
	AttS211: int init -1;
	AttS221: int init -1;
	AttS231: int init -1;
	AttS241: int init -1;
	AttS251: int init -1;
	AttS261: int init -1;
	AttS271: int init -1;
	AttS281: int init -1;
	AttS291: int init -1;
	AttS301: int init -1;
	AttS311: int init -1;

	int0 : int init 0;
	int1 : int init 1;
	int2 : int init 2;
	int3 : int init 3;
	int4 : int init 4;
	int5 : int init 5;

	
	state : int init 0;
	seed : int init 12;
	



	[] (state=0) & (newRandao=true) -> 1 : (int0'=((stake0>=32)?0:-1))&(int1'=((stake1>=32)?1:-1))&(int2'=((stake2>=32)?2:-1))&
		(int3'=((stake3>=32)?3:-1))&(int4'=((stake4>=32)?4:-1))&(int5'=((stake5>=32)?5:-1))&(seed'=seed+1)&(state'=1);
	//[] (state=0) & (newRandao=true) -> 1 : (seed'=seed+1)&(state'=1);


	[] (state=1) -> 1: (ValidatorB0'=randomNumber(seed, 0,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ) )& (ValidatorB1'=randomNumber(seed, 1,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 )) &
		 (ValidatorB2'=randomNumber(seed, 2,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB3'=randomNumber(seed, 3,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (ValidatorB4'=randomNumber(seed, 4,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB5'=randomNumber(seed, 5,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (ValidatorB6'=randomNumber(seed, 6,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB7'=randomNumber(seed, 7,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (ValidatorB8'=randomNumber(seed, 8,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB9'=randomNumber(seed, 9,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (ValidatorB10'=randomNumber(seed, 10,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB11'=randomNumber(seed, 11,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (ValidatorB12'=randomNumber(seed, 12,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB13'=randomNumber(seed, 13,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
                 (ValidatorB14'=randomNumber(seed, 14,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& (ValidatorB15'=randomNumber(seed, 15,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (ValidatorB16'=randomNumber(seed, 16,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB17'=randomNumber(seed, 17,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
  		 (ValidatorB18'=randomNumber(seed, 18,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB19'=randomNumber(seed, 19,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
 		 (ValidatorB20'=randomNumber(seed, 20,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB21'=randomNumber(seed, 19,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (ValidatorB22'=randomNumber(seed, 22,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB23'=randomNumber(seed, 23,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (ValidatorB24'=randomNumber(seed, 24,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB25'=randomNumber(seed, 25,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (ValidatorB26'=randomNumber(seed, 26,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB27'=randomNumber(seed, 27,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (ValidatorB28'=randomNumber(seed, 28,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB29'=randomNumber(seed, 29,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
 		 (ValidatorB30'=randomNumber(seed, 30,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (ValidatorB31'=randomNumber(seed, 31,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 )) &
		 (AttS00'=randomNumber(seed, 32,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5) )& (AttS10'=randomNumber(seed, 33,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 )) &
		 (AttS20'=randomNumber(seed, 34,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS30'=randomNumber(seed, 35,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS40'=randomNumber(seed, 36,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS50'=randomNumber(seed, 37,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS60'=randomNumber(seed, 38,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS70'=randomNumber(seed, 39,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (AttS80'=randomNumber(seed, 40,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS90'=randomNumber(seed, 41,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (AttS100'=randomNumber(seed, 42,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS110'=randomNumber(seed, 43,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (AttS120'=randomNumber(seed, 44,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS130'=randomNumber(seed, 45,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
                 (AttS140'=randomNumber(seed, 46,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS150'=randomNumber(seed, 47,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS160'=randomNumber(seed, 48,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS170'=randomNumber(seed, 49,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
  		 (AttS180'=randomNumber(seed, 50,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS190'=randomNumber(seed, 51,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
 		 (AttS200'=randomNumber(seed, 52,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS210'=randomNumber(seed, 53,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS220'=randomNumber(seed, 54,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS230'=randomNumber(seed, 55,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS240'=randomNumber(seed, 56,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS250'=randomNumber(seed, 57,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS260'=randomNumber(seed, 58,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS270'=randomNumber(seed, 59,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS280'=randomNumber(seed, 60,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS290'=randomNumber(seed, 61,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
 		 (AttS300'=randomNumber(seed, 62,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS310'=randomNumber(seed, 63,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))&
		(AttS01'=randomNumber(seed, 64,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5) )& (AttS11'=randomNumber(seed, 65,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 )) &
		 (AttS21'=randomNumber(seed, 66,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS31'=randomNumber(seed, 67,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS41'=randomNumber(seed, 68,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS51'=randomNumber(seed, 69,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS61'=randomNumber(seed, 70,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS71'=randomNumber(seed, 71,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (AttS81'=randomNumber(seed, 72,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS91'=randomNumber(seed, 73,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (AttS101'=randomNumber(seed, 74,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS111'=randomNumber(seed, 75,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
		 (AttS121'=randomNumber(seed, 76,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS131'=randomNumber(seed, 77,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& 
                 (AttS141'=randomNumber(seed, 78,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS151'=randomNumber(seed, 79,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS161'=randomNumber(seed, 80,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS171'=randomNumber(seed, 81,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
  		 (AttS181'=randomNumber(seed, 82,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS191'=randomNumber(seed, 83,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
 		 (AttS201'=randomNumber(seed, 84,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS211'=randomNumber(seed, 85,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS221'=randomNumber(seed, 86,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS231'=randomNumber(seed, 87,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS241'=randomNumber(seed, 88,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS251'=randomNumber(seed, 89,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS261'=randomNumber(seed, 90,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS271'=randomNumber(seed, 91,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
		 (AttS281'=randomNumber(seed, 92,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS291'=randomNumber(seed, 93,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))& 
 		 (AttS301'=randomNumber(seed, 94,int0,int1,int2,int3,int4,int5 ,int0,int1,int2,int3,int4,int5))& (AttS311'=randomNumber(seed, 95,int0,int1,int2,int3,int4,int5,int0,int1,int2,int3,int4,int5 ))&
		 (newRandao'=false)&(state'=0);
	
	

	
	
endmodule

module RandaoPSelection 
	
	
	i:[0..32] init 0;
	
	[] (i=0) & (newRandao=false) -> 1 : (validatorID'=ValidatorB0) & (voteID0'=AttS00)& (voteID1'=AttS01) & (i'=i+1);
	[] (i=1)-> slot : (validatorID'=ValidatorB1) & (voteID0'=AttS10) & (voteID1'=AttS11)& (i'=i+1);
	[] (i=2)-> slot : (validatorID'=ValidatorB2)  & (voteID0'=AttS20)& (voteID1'=AttS21)& (i'=i+1);
	[] (i=3)-> slot : (validatorID'=ValidatorB3)  & (voteID0'=AttS30) & (voteID1'=AttS31)& (i'=i+1);
	[] (i=4)-> slot : (validatorID'=ValidatorB4) & (voteID0'=AttS40) & (voteID1'=AttS41)& (i'=i+1);
	[] (i=5)-> slot : (validatorID'=ValidatorB5) & (voteID0'=AttS50) & (voteID1'=AttS51)& (i'=i+1);
	[] (i=6)-> slot : (validatorID'=ValidatorB6) & (voteID0'=AttS60) & (voteID1'=AttS61)& (i'=i+1);
	[] (i=7)-> slot : (validatorID'=ValidatorB7) & (voteID0'=AttS70) & (voteID1'=AttS71)& (i'=i+1);
	[] (i=8)-> slot : (validatorID'=ValidatorB8) & (voteID0'=AttS80) & (voteID1'=AttS81)& (i'=i+1);
	[] (i=9)-> slot : (validatorID'=ValidatorB9) & (voteID0'=AttS90) & (voteID1'=AttS91)& (i'=i+1);
	[] (i=10)-> slot : (validatorID'=ValidatorB10) & (voteID0'=AttS100) & (voteID1'=AttS101)& (i'=i+1);
	[] (i=11)-> slot : (validatorID'=ValidatorB11) & (voteID0'=AttS110) & (voteID1'=AttS111)& (i'=i+1);
	[] (i=12)-> slot : (validatorID'=ValidatorB12) & (voteID0'=AttS120) & (voteID1'=AttS121)& (i'=i+1);
	[] (i=13)-> slot : (validatorID'=ValidatorB13) & (voteID0'=AttS130) & (voteID1'=AttS131)& (i'=i+1);
	[] (i=14)-> slot : (validatorID'=ValidatorB14) & (voteID0'=AttS140) & (voteID1'=AttS141)& (i'=i+1);
	[] (i=15)-> slot : (validatorID'=ValidatorB15)  & (voteID0'=AttS150)& (voteID1'=AttS151)& (i'=i+1);
	[] (i=16)-> slot : (validatorID'=ValidatorB16)  & (voteID0'=AttS160)& (voteID1'=AttS161)& (i'=i+1);
	[] (i=17)-> slot : (validatorID'=ValidatorB17) & (voteID0'=AttS170) & (voteID1'=AttS171)& (i'=i+1);
	[] (i=18)-> slot : (validatorID'=ValidatorB18) & (voteID0'=AttS180) & (voteID1'=AttS181)& (i'=i+1);
	[] (i=19)-> slot : (validatorID'=ValidatorB19) & (voteID0'=AttS190) & (voteID1'=AttS191)& (i'=i+1);
	[] (i=20)-> slot : (validatorID'=ValidatorB20) & (voteID0'=AttS200) & (voteID1'=AttS201)& (i'=i+1);
	[] (i=21)-> slot : (validatorID'=ValidatorB21) & (voteID0'=AttS210) & (voteID1'=AttS211)& (i'=i+1);
	[] (i=22)-> slot : (validatorID'=ValidatorB22) & (voteID0'=AttS220) & (voteID1'=AttS221)& (i'=i+1);
	[] (i=23)-> slot : (validatorID'=ValidatorB23) & (voteID0'=AttS230) & (voteID1'=AttS231)& (i'=i+1);
	[] (i=24)-> slot : (validatorID'=ValidatorB24) & (voteID0'=AttS240) & (voteID1'=AttS241)& (i'=i+1);
	[] (i=25)-> slot : (validatorID'=ValidatorB25) & (voteID0'=AttS250) & (voteID1'=AttS251)& (i'=i+1);
	[] (i=26)-> slot : (validatorID'=ValidatorB26) & (voteID0'=AttS260) & (voteID1'=AttS261)& (i'=i+1);
	[] (i=27)-> slot : (validatorID'=ValidatorB27) & (voteID0'=AttS270) & (voteID1'=AttS271)& (i'=i+1);
	[] (i=28)-> slot : (validatorID'=ValidatorB28) & (voteID0'=AttS280) & (voteID1'=AttS281)& (i'=i+1);
	[] (i=29)-> slot : (validatorID'=ValidatorB29) & (voteID0'=AttS290) & (voteID1'=AttS291)& (i'=i+1);
	[] (i=30)-> slot : (validatorID'=ValidatorB30) & (voteID0'=AttS300) & (voteID1'=AttS301)& (i'=i+1);
	[] (i=31)-> slot : (validatorID'=ValidatorB31) & (voteID0'=AttS310) & (voteID1'=AttS311)& (i'=i+1);
	[] (i>31)-> 1: (i'=0) & (newRandao'=true); 




	

endmodule


label "finInc" = finalizationIncrease = true;

label "equalLength" = kLength = true;
label "sameHeigth" = 
((heightCheckpoint0 > 0) & (heightCheckpoint1 > 0) & (heightCheckpoint2 > 0) & (heightCheckpoint3 > 0) & (heightCheckpoint1 > 0) & (heightCheckpoint5 > 0)) ; 
label "winner" = M0_STATE = Winner | M1_STATE = Winner | M2_STATE = Winner |  M3_STATE = Winner |  M4_STATE = Winner |  M5_STATE = Winner;
label "someJustified" = justified0 = true | justified1 = true | justified2 = true | justified3 = true | justified4 = true | justified5 = true;
label "someFinalized" = finalized0 = true | finalized1 = true | finalized2 = true | finalized3 = true | finalized4 = true | finalized5 = true;
label "someCreated" = created0 = true | created1 = true | created2 = true | created3 = true | created4 = true | created5 = true;

label "honestJustified" = justified0=true | justified1=true | justified2=true;
